/* -*- Mode: C; c-basic-offset: 4 -*-
 * python-conic - Python bindings for the ConIC library.
 *
 *   conic.override: overrides for the conic module.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 */
%%
headers
#define NO_IMPORT_PYGOBJECT
#include <pygobject.h>

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <libintl.h>

#include <glib-object.h>

#include "conic-types.h"

%%
modulename conic

%%
import gobject.GObject as PyGObject_Type
%%
ignore-glob *_get_type

%%
override con_ic_connection_get_proxy_ignore_hosts noargs
static PyObject *
_wrap_con_ic_connection_get_proxy_ignore_hosts (PyGObject *self)
{
    GSList *list, *head;
    PyObject *ret;
    ConIcConnection *connection;
    gint i, len;

    connection = CON_IC_CONNECTION(self->obj);
    if(connection){
        list = con_ic_connection_get_proxy_ignore_hosts(connection);
        head = list;
        len = g_slist_length(list);
    } else {
        Py_INCREF(Py_None);
        return Py_None;
    }
    
    if(!list){
        Py_INCREF(Py_None);
        return Py_None;
    }

    ret = PyList_New(len);

    for(i = 0; i < len; i++){
        PyList_SetItem(ret, i, PyString_FromString(list->data));
        list = list->next;
    }

    g_slist_free(head);

    return ret;
}

%%
override con_ic_connection_get_all_iaps noargs
static PyObject *
_wrap_con_ic_connection_get_all_iaps (PyGObject *self)
{
    GSList *list, *head;
    PyObject *ret;
    ConIcConnection *connection;
    gint i, len;

    connection = CON_IC_CONNECTION(self->obj);
    if(connection){
        list = con_ic_connection_get_all_iaps(connection);
        head = list;
        len = g_slist_length(list);
    } else {
        Py_INCREF(Py_None);
        return Py_None;
    }
    
    if(!list){
        Py_INCREF(Py_None);
        return Py_None;
    }

    ret = PyList_New(len);

    for(i = 0; i < len; i++){
        ConIcIap *iap = list->data;
        PyList_SetItem(ret, i, pygobject_new((GObject *)iap));
        list = list->next;
    }

    g_slist_free(head);

    return ret;
}
/* End of fix */
